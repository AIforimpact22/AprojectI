app.py: 
import streamlit as st
from theme import apply_dark_theme
from database import create_tables
from sidebar import show_sidebar
from home import show_home
from style import show_footer
from importlib import import_module
from github_progress import get_user_progress
import sys
import os

def safe_rerun():
    if hasattr(st, "experimental_rerun"):
        st.experimental_rerun()
    elif hasattr(st, "rerun"):
        st.rerun()
    else:
        st.error("Streamlit rerun functionality is not available.")

def enforce_week_gating(selected):
    """
    Enforces that a weekly module is accessible only if the previous week is fully completed.
    For example, if Week 1 has 10 tabs, then Week 2 will be unlocked only if the user's progress
    for "week1" is 10. Similarly, Week 3 will be unlocked only if "week2" progress is 12, etc.
    """
    if selected.startswith("modules_week"):
        try:
            week = int(selected.replace("modules_week", ""))
        except ValueError:
            return True  # Allow if the format is invalid.
        if week == 1:
            return True  # Week 1 is always accessible.
        # Define required progress for previous weeks.
        required_progress = {2: 10, 3: 12, 4: 12, 5: 7}
        username = st.session_state.get("username", "default_user")
        user_prog = get_user_progress(username)
        prev_week_key = f"week{week-1}"
        prev_progress = user_prog.get(prev_week_key, 0)
        return prev_progress >= required_progress.get(week, 0)
    return True

def main():
    st.set_page_config(page_title="Code for Impact", layout="wide")
    apply_dark_theme()
    create_tables()

    # Add the 'updates' folder to sys.path so that modules within it can be imported.
    updates_path = os.path.abspath("updates")
    if os.path.isdir(updates_path) and updates_path not in sys.path:
        sys.path.append(updates_path)
    
    if "page" not in st.session_state:
        st.session_state["page"] = "offer"

    if st.session_state.get("logged_in", False):
        show_sidebar()
        selected = st.session_state.get("page", "home")

        if selected == "logout":
            st.session_state["logged_in"] = False
            st.session_state["page"] = "offer"
            safe_rerun()
        elif selected == "home":
            show_home()
        else:
            # Use gating logic based on GitHub progress.
            if not enforce_week_gating(selected):
                st.warning("You must complete the previous week before accessing this section.")
                st.stop()
            try:
                # First, try importing the module with the given name.
                try:
                    module = import_module(selected)
                except ImportError:
                    # If not found, try importing from the updates folder.
                    module = import_module("updates." + selected)
                if hasattr(module, "show"):
                    module.show()
                else:
                    st.warning("The selected module does not have a 'show()' function.")
            except ImportError as e:
                st.warning("Unknown selection: " + str(e))
    else:
        if st.session_state["page"] == "offer":
            import offer
            offer.show()
        elif st.session_state["page"] == "login":
            import login
            login.show_login_create_account()
        elif st.session_state["page"] == "loginx":
            st.warning("Course 2 Login is not available yet.")
            if st.button("Go Back"):
                st.session_state["page"] = "offer"
                safe_rerun()
        elif st.session_state["page"] == "course2_app":
            from second.appx import appx
            appx.show()
        else:
            import login
            login.show_login_create_account()

    show_footer()

if __name__ == "__main__":
    main()


















as1.py
import streamlit as st
import folium
import pandas as pd
from geopy.distance import geodesic
from io import StringIO
from streamlit_folium import st_folium
from utils.style1 import set_page_style
import mysql.connector
from mysql.connector import IntegrityError


# ──────────────────────────────────────────────────────────────────────────────
# DB helper – reads `[mysql]` block in secrets
# ──────────────────────────────────────────────────────────────────────────────
def _get_conn():
    cfg = st.secrets["mysql"]
    return mysql.connector.connect(
        host=cfg["host"],
        port=int(cfg.get("port", 3306)),
        user=cfg["user"],
        password=cfg["password"],
        database=cfg["database"],
        autocommit=False,
    )


# ──────────────────────────────────────────────────────────────────────────────
# Main UI                                                                   │
# ──────────────────────────────────────────────────────────────────────────────
def show():
    # Apply the custom page style
    set_page_style()

    # Initialize session state variables if not already set
    defaults = {
        "run_success": False,
        "map_object": None,
        "dataframe_object": None,
        "captured_output": "",
        "username_entered": False,
        "username": "",
    }
    for k, v in defaults.items():
        st.session_state.setdefault(k, v)

    st.title("Assignment 1: Mapping Coordinates and Calculating Distances")

    # ──────────────────────────────────────────────────────────────
    # Step 2: Review Assignment Details (always show)
    # ──────────────────────────────────────────────────────────────
    st.markdown(
        '<h1 style="color: #ADD8E6;">Step 2: Review Assignment Details</h1>',
        unsafe_allow_html=True,
    )
    tab1, tab2 = st.tabs(["Assignment Details", "Grading Details"])

    # … (unchanged descriptive Markdown) …

    # ──────────────────────────────────────────────────────────────
    # Step 1: Enter Username
    # ──────────────────────────────────────────────────────────────
    st.markdown(
        '<h1 style="color: #ADD8E6;">Step 1: Enter Your Username</h1>',
        unsafe_allow_html=True,
    )
    username_input = st.text_input("Username", key="as1_username")
    if st.button("Enter"):
        with _get_conn() as conn:
            cur = conn.cursor()
            cur.execute("SELECT 1 FROM records WHERE username = %s", (username_input,))
            user_exists = cur.fetchone() is not None

        if user_exists:
            st.session_state["username_entered"] = True
            st.session_state["username"] = username_input
            st.success(f"Welcome, {username_input}!")
        else:
            st.error("Invalid username. Please enter a registered username.")
            st.session_state["username_entered"] = False

    # ──────────────────────────────────────────────────────────────
    # Step 3: Run and Submit Code (logged-in users)
    # ──────────────────────────────────────────────────────────────
    if st.session_state.get("username_entered", False):
        st.markdown(
            '<h1 style="color: #ADD8E6;">Step 3: Run and Submit Your Code</h1>',
            unsafe_allow_html=True,
        )
        st.markdown(
            '<p style="color: white;">📝 Paste Your Code Here</p>',
            unsafe_allow_html=True,
        )
        code_input = st.text_area("", height=300)

        # ───────── Run code
        if st.button("Run Code"):
            st.session_state["run_success"] = False
            st.session_state["captured_output"] = ""
            try:
                import sys

                captured = StringIO()
                sys.stdout = captured

                local_ctx = {}
                exec(code_input, {}, local_ctx)

                sys.stdout = sys.__stdout__
                st.session_state["captured_output"] = captured.getvalue()

                # Detect map / DataFrame
                st.session_state["map_object"] = next(
                    (o for o in local_ctx.values() if isinstance(o, folium.Map)), None
                )
                st.session_state["dataframe_object"] = next(
                    (o for o in local_ctx.values() if isinstance(o, pd.DataFrame)),
                    None,
                )

                st.session_state["run_success"] = True
            except Exception as e:
                sys.stdout = sys.__stdout__
                st.error(f"An error occurred while running your code: {e}")

        # ───────── Show outputs
        if st.session_state["run_success"]:
            st.markdown(
                '<h3 style="color: white;">📄 Captured Output</h3>',
                unsafe_allow_html=True,
            )
            if st.session_state["captured_output"]:
                out_fmt = st.session_state["captured_output"].replace("\n", "<br>")
                st.markdown(
                    f'<pre style="color: white; white-space: pre-wrap; word-wrap: break-word;">{out_fmt}</pre>',
                    unsafe_allow_html=True,
                )
            else:
                st.markdown(
                    '<p style="color: white;">No text output captured.</p>',
                    unsafe_allow_html=True,
                )

            if st.session_state["map_object"]:
                st.markdown("### 🗺️ Map Output")
                st_folium(st.session_state["map_object"], width=1000, height=500)

            if st.session_state["dataframe_object"] is not None:
                st.markdown("### 📊 DataFrame Output")
                st.dataframe(st.session_state["dataframe_object"])

        # ───────── Submit code
        if st.button("Submit Code"):
            if not st.session_state.get("run_success", False):
                st.error("Please run your code successfully before submitting.")
            else:
                from grades.grade1 import grade_assignment

                grade = grade_assignment(code_input)
                if grade < 70:
                    st.error(f"You got {grade}/100. Please try again.")
                else:
                    with _get_conn() as conn:
                        cur = conn.cursor()
                        cur.execute(
                            "UPDATE records SET as1 = %s WHERE username = %s",
                            (grade, st.session_state["username"]),
                        )
                        conn.commit()
                        updated = cur.rowcount

                    if updated:
                        st.success(f"Submission successful! Your grade: {grade}/100")
                    else:
                        st.error("No record updated—please check username/database.")

                    # Reset state
                    st.session_state["username_entered"] = False
                    st.session_state["username"] = ""


if __name__ == "__main__":
    show()

